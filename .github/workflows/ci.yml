name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Test Eligibility Engine MCP Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          sudo apt-get update
          sudo apt-get install -y jq
          cargo install cargo-release
          echo "‚úÖ Dependencies installed"

      - name: Test version sync
        run: |
          echo "üîÑ Testing version sync..."
          make sync-version
          echo "‚úÖ Version sync successful"

      - name: Run unit tests
        run: |
          echo "üîå Testing unit tests..."
          make test
          echo "‚úÖ Unit tests successful"
          
      - name: Run build all servers
        run: |
          echo "üîå Building all servers..."
          make build-all
          echo "‚úÖ All servers built successfully"

      - name: Test make pack and verify contents
        run: |
          echo "üì¶ Testing make pack..."
          make pack
          
          # Check that a MCPB file was created (find any .mcpb file)
          MCPB_FILE=$(ls *.mcpb 2>/dev/null | head -1)
          if [ -z "$MCPB_FILE" ]; then
            echo "‚ùå No .mcpb file found"
            echo "Files in directory:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Found MCPB file: $MCPB_FILE"
          
          # Install unzip if not available (should be available in ubuntu-latest)
          if ! command -v unzip &> /dev/null; then
            echo "Installing unzip..."
            sudo apt-get update && sudo apt-get install -y unzip
          fi
          
          # Extract the package using unzip
          echo "üìÇ Extracting package with unzip..."
          mkdir -p test-extract
          unzip -q "$MCPB_FILE" -d test-extract
          
          # Show extracted contents for debugging
          echo "üìÅ Extracted contents:"
          find test-extract -type f | head -20
          
          # Verify required files exist
          echo "üîç Verifying package contents..."
          
          if [ ! -f test-extract/stdio_server ]; then
            echo "‚ùå stdio_server missing"
            ls -la test-extract/
            exit 1
          fi
          echo "‚úÖ stdio_server found"
          
          if [ ! -f test-extract/manifest.json ]; then
            echo "‚ùå manifest.json missing"
            ls -la test-extract/
            exit 1
          fi
          echo "‚úÖ manifest.json found"
          
          echo "‚úÖ make pack successful - all required files present"

      - name: Test cargo-release dry-run
        run: |
          echo "üöÄ Testing cargo-release dry-run..."
          cargo release patch --dry-run || echo "‚ö†Ô∏è cargo-release dry-run completed (may warn about no changes)"
          echo "‚úÖ cargo-release dry-run test completed"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            *.mcpb
            target/release/stdio_server
            target/release/sse_server
            target/release/mcp_server
          retention-days: 7

  # Production container build and push job  
  build-and-push:
    name: Build and Push Production Container
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Setup Docker Buildx with cache
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Setup Rust toolchain (for minimal rebuild)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Login to Container Registry
        run: |
          source .env
          # Determine registry type and login
          if [[ "${REGISTRY}" == *"quay.io"* ]]; then
            echo "Logging in to Quay.io..."
            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login quay.io -u "${{ secrets.REGISTRY_USER }}" --password-stdin
          elif [[ "${REGISTRY}" == *"docker.io"* ]]; then
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login docker.io -u "${{ secrets.REGISTRY_USER }}" --password-stdin
          else
            echo "Logging in to custom registry..."
            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login "${REGISTRY}" -u "${{ secrets.REGISTRY_USER }}" --password-stdin
          fi

      - name: Build production container image
        run: |
          echo "üê≥ Building production container image..."
          chmod +x scripts/image.sh
          
          # Use Docker buildkit for better caching
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain
          
          scripts/image.sh build

      - name: Push container image to registry
        run: |
          echo "üöÄ Pushing production container image..."
          scripts/image.sh push

      - name: Show container image info
        run: |
          echo "üìã Production container image information:"
          scripts/image.sh info